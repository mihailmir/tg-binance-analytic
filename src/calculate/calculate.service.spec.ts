import { Test, TestingModule } from '@nestjs/testing';
import { Model, Types } from 'mongoose';
import { CalculateService } from './calculate.service';
import { getModelToken } from '@nestjs/mongoose';
import { TgSignal, SignalType } from '../schemas/tg.messages.schema';
import { BinanceMarketData } from '../schemas/binance.data.schema';
import { Trade, TradeStatus } from '../schemas/trades.schema';
import { CryptoCurrency } from '../schemas/crypto.currency.schema';

describe('CalculateService', () => {
  let service: CalculateService;
  let tradeModel: Model<Trade>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        CalculateService,
        {
          provide: getModelToken(TgSignal.name),
          useValue: Model,
        },
        {
          provide: getModelToken(CryptoCurrency.name),
          useValue: Model,
        },
        {
          provide: getModelToken(BinanceMarketData.name),
          useValue: Model,
        },
        {
          provide: getModelToken(Trade.name),
          useValue: Model,
        },
      ],
    }).compile();

    service = module.get<CalculateService>(CalculateService);
    tradeModel = module.get<Model<Trade>>(getModelToken(Trade.name));
  });

  describe('calculateProfitability', () => {
    it('should calculate profitability for multiple signals with multiple candles', async () => {
      const signals: TgSignal[] = [
        {
          _id: new Types.ObjectId(), // all 5 targets acheved long case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [1.0, 1.1],
          profitTargets: [1.2, 1.3, 1.4, 1.5, 1.6],
          stop: 0.9,
          type: SignalType.LONG,
          postTimestamp: new Date().getTime(),
        },
        {
          _id: new Types.ObjectId(), // all 5 targets acheved short case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [2.0, 2.1],
          profitTargets: [1.9, 1.8, 1.7, 1.6, 1.5],
          stop: 2.2,
          type: SignalType.SHORT,
          postTimestamp: new Date().getTime(),
        },
        {
          _id: new Types.ObjectId(), // 2 target achived long case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [1.5, 1.6],
          profitTargets: [1.7, 1.8, 1.9, 2.0, 2.1],
          stop: 1.2,
          type: SignalType.LONG,
          postTimestamp: new Date().getTime(),
        },
        {
          _id: new Types.ObjectId(), // 2 targets achived short case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [2.0, 2.1],
          profitTargets: [1.9, 1.8, 1.5, 1.4],
          stop: 2.2,
          type: SignalType.SHORT,
          postTimestamp: new Date().getTime(),
        },
        {
          _id: new Types.ObjectId(), // BREAKEVEN long case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [1.0, 1.1],
          profitTargets: [1.1, 1.3, 1.4, 1.5, 1.6],
          stop: 0.9,
          type: SignalType.LONG,
          postTimestamp: new Date().getTime(),
        },
        {
          _id: new Types.ObjectId(), // BREAKEVEN short case
          tgChannelId: new Types.ObjectId(),
          entryTargets: [2.0, 2.1],
          profitTargets: [1.95, 1.8, 1.7, 1.6, 1.5],
          stop: 2.2,
          type: SignalType.SHORT,
          postTimestamp: new Date().getTime(),
        },
      ] as TgSignal[];

      const candlesMap: { [key: string]: BinanceMarketData[] } = {
        [signals[0]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.0,
            high: 1.15,
            low: 0.95,
            close: 1.05,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.1,
            high: 1.25,
            low: 1.05,
            close: 1.15,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.2,
            high: 1.35,
            low: 1.15,
            close: 1.25,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.3,
            high: 1.65,
            low: 1.25,
            close: 1.35,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
        [signals[1]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.0,
            high: 2.15,
            low: 1.95,
            close: 2.05,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.1,
            high: 2.05,
            low: 1.85,
            close: 1.95,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.0,
            high: 1.95,
            low: 1.75,
            close: 1.85,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.9,
            high: 1.85,
            low: 1.5,
            close: 1.75,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
        [signals[2]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.4,
            high: 1.55,
            low: 1.3,
            close: 1.4,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.5,
            high: 1.7,
            low: 1.6,
            close: 1.65,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.6,
            high: 1.85,
            low: 1.6,
            close: 1.75,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.7,
            high: 1.7,
            low: 1.6,
            close: 1.78,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.75,
            high: 1.78,
            low: 1.7,
            close: 1.72,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
        [signals[3]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2,
            high: 2.15,
            low: 2.05,
            close: 2.1,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.0,
            high: 2.15,
            low: 1.95,
            close: 2.05,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.1,
            high: 2.05,
            low: 1.85,
            close: 1.95,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.0,
            high: 1.95,
            low: 1.75,
            close: 1.85,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.9,
            high: 1.85,
            low: 1.65,
            close: 1.75,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
        [signals[4]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.0,
            high: 1.1,
            low: 0.95,
            close: 1.0,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1,
            high: 1.05,
            low: 0.95,
            close: 1.1,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 0.9,
            high: 1,
            low: 0.85,
            close: 1.2,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.3,
            high: 1.35,
            low: 1.25,
            close: 1.3,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
        [signals[5]._id.toString()]: [
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 2.0,
            high: 2.05,
            low: 1.95,
            close: 2.0,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.9,
            high: 2.2,
            low: 1.85,
            close: 1.9,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.8,
            high: 1.85,
            low: 1.75,
            close: 1.8,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
          {
            _id: new Types.ObjectId(),
            currencyId: new Types.ObjectId(),
            open: 1.7,
            high: 1.75,
            low: 1.65,
            close: 1.7,
            volume: 100,
            openTime: new Date().getTime(),
            closeTime: new Date().getTime(),
            quoteVolume: 1000,
            trades: 10,
            baseAssetVolume: 100,
            quoteAssetVolume: 1000,
          },
        ],
      };

      const expectedProfits = [
        { status: TradeStatus.TAKE, profit: 33.33 },
        { status: TradeStatus.TAKE, profit: 17.07 },
        { status: TradeStatus.OPEN, profit: 5.162 },
        { status: TradeStatus.OPEN, profit: 4.878 },
        { status: TradeStatus.BREAKEVEN, profit: 0 },
        { status: TradeStatus.BREAKEVEN, profit: 0 },
      ];

      for (const [index, signal] of signals.entries()) {
        const candles = candlesMap[signal._id.toString()];
        const trade = await service.calculateProfitability(signal, candles);
        console.log(JSON.stringify(trade));

        expect(trade).toBeDefined();
        expect(trade.signalId).toEqual(signal._id);
        expect(trade.totalProfitPercentage).toBeCloseTo(
          expectedProfits[index].profit,
          2,
        );
        expect(trade.status).toEqual(expectedProfits[index].status);
      }
    });
  });
});
